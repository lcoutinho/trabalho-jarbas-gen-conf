O inferno das dependências é quando temos que gerenciar, e versionar bibliotecas que o nosso código faz uso, porém de que não são autoria nossa.
O caso de Jarbas refere-se a um evento que em o projeto Jarbas teve seu funcionamento afetado, por culpa de uma mudança de terceiros em uma biblioteca que o mesmo utilizava, esse projeto é constituido de um Dashboard, e algumas páginas informativas, onde o mesmo tem como função disponibilizar informações de reembolsos.
O PyUP é uma ferramenta utilizada para acompanhar as atualizações de segurança regulares e de dependências do Python com solicitações de recebimento automatizadas diretamente para o repositório do GitHub, no qual, outra ferramenta que oferece um serviço semelhante é o GIT.
Com a utilização do versionamento semântico foi possivel definir o conjunto de regras e requisitos que ditam como os números das versões devem ser atribuidas e incrementadas, no qual, no caso deste projeto a equipe revisou deste o inicio os versionamentos feitos, realizou as devidas alterações, até ficar conforme orientado pelo metódo de versionamento semântico.
A maneira mais efetiva de iniciar um trabalho, que envolve muitas pessoas, diversas equipes, é definir uma linguagem comum (padronizada), falar o mesmo protocolo, sempre fez, e provavelmente fará parte de nossa evolução tecnológica.
Para isso existem os Padrões! Mesmo que você não utilize padrões, conhece, ou ao menos já ouviu falar de alguns Patterns (padrões) do mundo da tecnologia como: Observer, Factory, Filter, Proxy, etc... 
Para o mundo de SCM isso não é diferente, existem padrões, que muitas vezes, infelizmente, são negligenciados. Ou tão pouco são de conhecimento público, mesmo sendo a melhor saída de dar qualidade e produtividade, aos times de desenvolvimento.
Porque o versionamento semântico é necessário?
O versionamento semântico hoje é um dos padrões de versionamento mais usados e conhecidos. Criado para evitar o chamado "dependency hell" (inferno das dependências), tem o objetivo de evitar que atualizações de dependência quebrem o seu software indevidamente, enquanto permitindo que você tenha uma noção do status de estabilidade do software (se é "seguro" usar em produção, por exemplo) e possa identificar se uma nova versão possui apenas novos recursos ou se possui apenas correções de bugs, por exemplo.
São 11 "regras" que compõem a especificação, e que, quando seguidas corretamente, garantem, em teoria, que as dependências do seu projeto sejam estáveis e que não ocorra surpresas durante a instalação delas e o seu uso por parte do seu projeto. Um exemplo dessas regras, por exemplo, é a que obriga que uma determinada versão de um software seja imutável, ou seja: Lançada uma versão, ela sob circunstância alguma pode ser apagada, editada ou modificada de qualquer jeito, independente de quaisquer bugs que tal versão possua. Assim, caso você tenha feito alguma modificação - qualquer modificação - e queira lançá-la, precisa lançar uma nova versão.
Afim de evitar e ou diminuir o risco de  danos a qualidade do trabalho executado, ter um histórico das alterações efetivadas é importante e necessário possuir uma ferramenta de controle e versionamento de artefatos, confiável e de fácil usabilidade.
Além disso, o versionamento semântico permite que as demais áreas identifiquem o tipo de mudança e já atuem de acordo com o procedimento interno. Por exemplo, no caso de uma versão Major, a área de QA automaticamente já sabe que deve rodar uma bateria de testes completa antes do release final pra garantir que o que funcionava continua funcionando e o que for de novo implementado também.
